export declare type AnyVal = unknown;
export declare type RawObject = Record<string, AnyVal>;
export declare type RawArray = Array<AnyVal>;
export declare type ArrayOrObject = RawObject | RawArray;
export interface Callback<R = AnyVal, T = AnyVal> {
    (...args: T[]): R;
}
export interface Predicate<T> {
    (...args: T[]): boolean;
}
export declare type ComparatorResult = -1 | 0 | 1;
export interface Comparator<T> {
    (left: T, right: T): ComparatorResult;
}
/**
 * Custom function to hash values to improve faster comparaisons
 */
export declare type HashFunction = Callback<number>;
export declare enum JsType {
    NULL = "null",
    UNDEFINED = "undefined",
    BOOLEAN = "boolean",
    NUMBER = "number",
    STRING = "string",
    DATE = "date",
    REGEXP = "regexp",
    ARRAY = "array",
    OBJECT = "object",
    FUNCTION = "function"
}
export declare enum BsonType {
    BOOL = "bool",
    INT = "int",
    LONG = "long",
    DOUBLE = "double",
    DECIMAL = "decimal",
    REGEX = "regex"
}
